diff --git a/libscidavis/src/future/core/AbstractColumn.h b/libscidavis/src/future/core/AbstractColumn.h
index 0fabde9..31ac15a 100644
--- a/libscidavis/src/future/core/AbstractColumn.h
+++ b/libscidavis/src/future/core/AbstractColumn.h
@@ -273,7 +273,7 @@ class AbstractColumn : public AbstractAspect
 		/**
 		 * Use this only when dataType() is double
 		 */
-		virtual void replaceValues(int first, const QVector<double>& new_values) { Q_UNUSED(first) Q_UNUSED(new_values) };
+		virtual void replaceValues(int first, const QVector<qreal>& new_values) { Q_UNUSED(first) Q_UNUSED(new_values) };
 		//@}
 
 	signals: 
diff --git a/libscidavis/src/future/table/AsciiTableImportFilter.cpp b/libscidavis/src/future/table/AsciiTableImportFilter.cpp
index 79638ab..31ea90e 100644
--- a/libscidavis/src/future/table/AsciiTableImportFilter.cpp
+++ b/libscidavis/src/future/table/AsciiTableImportFilter.cpp
@@ -93,9 +93,8 @@ namespace
 
   template <class C> C conv(const QString& x);
   template <> QString conv<QString>(const QString& x) {return x;}
-  template <> double conv<double>(const QString& x) {return x.toDouble();}
-  //  template <> float conv<float>(const QString& x) {return x.toFloat();}
- 
+  template <> qreal conv<qreal>(const QString& x) {return (qreal)(x.toDouble());}
+
   template <class T>
   struct AP: public std::unique_ptr<T>
   {
diff --git a/libscidavis/src/scidavis.sip b/libscidavis/src/scidavis.sip
index 366e64b..7b1e408 100644
--- a/libscidavis/src/scidavis.sip
+++ b/libscidavis/src/scidavis.sip
@@ -171,7 +171,7 @@ class Column: AbstractAspect
 		void replaceDateTimes(int first, const QList<QDateTime>& new_values);
 		double valueAt(int row) const;
 		void setValueAt(int row, double new_value);
-		void replaceValues(int first, const QVector<double>& new_values);
+		void replaceValues(int first, const QVector<qreal>& new_values);
 
   Column * x() const;
 %MethodCode
@@ -516,7 +516,7 @@ public:
 %MethodCode
 	sipRes = new QVector<qreal>(sipCpp->d_future_matrix->columnCells(a0, a1, a2));
 %End
-	void setColumn(int col, int first_row, const QVector<double> &values);
+	void setColumn(int col, int first_row, const QVector<qreal> &values);
 %MethodCode
 	sipCpp->d_future_matrix->setColumnCells(a0, a1, a1+a2->size()-1, *a2);
 %End
@@ -524,7 +524,7 @@ public:
 %MethodCode
 	sipRes = new QVector<qreal>(sipCpp->d_future_matrix->rowCells(a0, a1, a2));
 %End
-	void setRow(int row, int first_column, const QVector<double> & values);
+	void setRow(int row, int first_column, const QVector<qreal> & values);
 %MethodCode
 	sipCpp->d_future_matrix->setRowCells(a0, a1, a1+a2->size()-1, *a2);
 %End
